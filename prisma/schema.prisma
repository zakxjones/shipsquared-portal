generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  firstName           String?
  lastName            String?
  storeName           String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  role                String               @default("user")
  shipstationStoreId  String?
  sessions            Session[]
  accounts            Account[]
  platformConnections PlatformConnection[]
  orders              Order[]
  referrals           Referral[]           @relation("UserReferrals")
  inboundShipments    InboundShipment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlatformConnection {
  id           String    @id @default(cuid())
  userId       String
  platform     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  storeName    String?
  storeUrl     String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  orders       Order[]

  @@unique([userId, platform, storeName])
}

model Order {
  id                   String             @id @default(cuid())
  userId               String
  platformConnectionId String
  platformOrderId      String
  orderNumber          String
  platform             String
  status               String
  total                Float
  currency             String             @default("USD")
  shippingAddress      Json
  billingAddress       Json
  items                Json
  shippingMethod       String?
  trackingNumber       String?
  shipstationOrderId   String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id])
  platformConnection   PlatformConnection @relation(fields: [platformConnectionId], references: [id])
  shipments            Shipment[]         @relation("OrderShipments")

  @@unique([platform, platformOrderId])
}

model Shipment {
  id             String    @id @default(cuid())
  orderId        String
  trackingNumber String?
  carrier        String?
  shippingMethod String?
  shippedAt      DateTime?
  createdAt      DateTime  @default(now())
  order          Order     @relation("OrderShipments", fields: [orderId], references: [id])
}

model Referral {
  id                  String   @id @default(cuid())
  referrerId          String
  firstName           String
  lastName            String
  brandName           String
  site                String?
  email               String
  ordersPerMonth      Int      @default(0)
  referralStatus      String   @default("pending")
  referralBonusStatus String   @default("pending")
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  referrer            User     @relation("UserReferrals", fields: [referrerId], references: [id])

  @@unique([referrerId, email])
}

model InboundShipment {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  shipperType    String
  origin         String?
  supplier       String?
  shippingMethod String?
  shipTo         String?
  packingListUrl String?
  shipDate       String?
  palletCount    String?
  eta            String?
  trackingNumber String?
  status         String   @default("Pending")
  notes          String?
  user           User     @relation(fields: [userId], references: [id])
}
